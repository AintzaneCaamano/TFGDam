package es.gameapp.multigameapp.simon;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.util.ArrayList;

import es.gameapp.multigameapp.Common;
import es.gameapp.multigameapp.InfoActivity;
import es.gameapp.multigameapp.MenuActivity;
import es.gameapp.multigameapp.R;
import es.gameapp.multigameapp.YourScoreActivity;
import es.gameapp.multigameapp.blackjack.BlackActivity;
import es.gameapp.multigameapp.media.MediaPController;
import es.gameapp.multigameapp.trivia.TriviaActivity;

import static android.graphics.Color.*;

public class SimonActivity extends AppCompatActivity  implements View.OnClickListener{
    //Views
    private Button btnReturn;
    private Button btnScore;
    private Button btnInfo;
    private Button btnDo;
    private Button btnRe;
    private Button btnMi;
    private Button btnFa;
    private TextView txtVScore;

    //General vars
    // Button colors
    private int [] colors = {RED, BLUE, CYAN, GREEN, YELLOW};
    private int score=0;
    private final String GAMETITLE = "SIMON";
    private Context context;

    //Game functionality vars
    private boolean continuePlaying=true;
    private int sequenceLength=3;
    private int userControl=1;
    //The sequence generated by the app
    private ArrayList<Integer> gameSequence = new ArrayList<Integer>();
    //The sequence inserted by  the player
    private ArrayList<Integer> userSequence = new ArrayList<Integer>();
    //Sequence Manager
    private SimonSequenceManager sequenceManager = new SimonSequenceManager();

    //Media
    private MediaPController mediaPController;
    //Media resources
    private  Uri SOUND_DO;
    private  Uri SOUND_RE;
    private  Uri SOUND_MI;
    private  Uri SOUND_FA;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_simon);
        //Save context
        context = this;

        //Initialize views
        btnReturn = findViewById(R.id.btn_simon_return);
        btnScore = findViewById(R.id.btn_simon_save);
        btnInfo= findViewById(R.id.btn_simon_info);
        btnDo = findViewById(R.id.btn_simon_do);
        btnRe = findViewById(R.id.btn_simon_re);
        btnMi = findViewById(R.id.btn_simon_mi);
        btnFa = findViewById(R.id.btn_simon_fa);
        txtVScore = findViewById(R.id.txtV_simon_score);

        showScore();

        //game Buttons OnClickListener
        btnDo.setOnClickListener(this);
        btnRe.setOnClickListener(this);
        btnMi.setOnClickListener(this);
        btnFa.setOnClickListener(this);

        //Initialize Uris
        SOUND_DO = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.re);
        SOUND_RE = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.re);
        SOUND_MI = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.mi);
        SOUND_FA = Uri.parse("android.resource://" + getPackageName() + "/" + R.raw.fa);

        //Initialize mediaPController
        mediaPController = new MediaPController(this);

        //Onclick for the intents to other activities
        btnReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Closes mediaController
                mediaPController.closeMediaPlayer();
                //Returns to menu
                setResult(RESULT_OK);
                finish();
            }
        });
        btnScore.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Closes mediaController
                mediaPController.closeMediaPlayer();
                //Opens your score
                Intent intento = new Intent(SimonActivity.this, YourScoreActivity.class);
                intento.putExtra("game", GAMETITLE);
                intento.putExtra("score", score);
                startActivity(intento);
                setResult(RESULT_OK);
                finish();
            }
        });
        btnInfo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //Opens info
                Intent intento = new Intent(SimonActivity.this, InfoActivity.class);
                intento.putExtra("game", GAMETITLE);
                startActivity(intento);
            }
        });
        //End of Intents section
        startGame();
    }

    @Override
    public void onClick(View v) {
        //Controls on click of the game buttons
        if (v==btnDo){
            mediaPController.initMediaPlayer(SOUND_DO);
            play(0);
        }else if (v==btnRe){
            mediaPController.initMediaPlayer(SOUND_RE);
            play(1);
        }else if (v==btnMi){
            mediaPController.initMediaPlayer(SOUND_MI);
            play(2);
        }else if (v==btnFa){
            mediaPController.initMediaPlayer(SOUND_FA);
            play(3);
        }
    }
    private void startGame(){
        sequenceManager.addValue(3);
        gameSequence=sequenceManager.getSequence();
        showSequence();
    }

    private void play(int number){
        if(continuePlaying) {
            //Checks if player hasnÂ´t lost
            if (userControl < sequenceLength) {
                //Counts user moves and saves them
                userControl++;
                userSequence.add(number);
            } else {
                //If there are no moves left, it checks the sequence
                userControl = 1;
                userSequence.add(number);
                if(!sequenceManager.checkSequence(userSequence)){
                    //If gamer looses, the game ends
                    continuePlaying=false;
                }else{
                    //If player wins, game keeps going
                    //It shows the score
                    score=score+100;
                    showScore();
                    //The sequence length grows
                    sequenceLength++;
                    //User entered sequence is erased
                    userSequence = new ArrayList<Integer>();
                    //It generates a new value for the sequence
                    sequenceManager.addValue(1);
                    gameSequence=sequenceManager.getSequence();
                    //It shows the sequence to the player
                    showSequence();
                }
            }
        }
    }

    private void showSequence() {
        disableButtons();
        //It shows the sequence to the player
        int delay = 0;
        for(int code:gameSequence){
            //Adds a second each time
            delay = delay+1000;
            //Initialize handler to set the delay
            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                public void run() {

                    //Methods to reproduce the sound after the delay time
                    changeBtnColor(code);
                    switch (code){
                        case 0:
                            //btnDo.performClick();
                            mediaPController.initMediaPlayer(SOUND_DO);
                            break;
                        case 1:
                           //btnRe.performClick();
                            mediaPController.initMediaPlayer(SOUND_RE);
                            break;
                        case 2:
                           //btnMi.performClick();
                            mediaPController.initMediaPlayer(SOUND_MI);
                            break;
                        case 3:
                            //btnFa.performClick();
                            mediaPController.initMediaPlayer(SOUND_FA);
                            break;
                    }
                //Closes the the delay code
                }
            }, delay); //1 second delay for each
        }

        enableButtons();
        //Stop handler code just in case is needed
        //handler.removeCallbacksAndMessages(null);
    }

    private void changeBtnColor(int btn){
        int delay = 500;
        Handler handler = new Handler();
        switch (btn){
            case 0:
                btnDo.setBackgroundColor(Color.parseColor("#FFFFFBD5"));
                handler.postDelayed(new Runnable() {
                    public void run() {
                        //Yellow
                        btnDo.setBackgroundColor(Color.parseColor("#FFEB3B"));
                    }
                }, delay); //delay for each
                break;
            case 1:
                btnRe.setBackgroundColor(Color.parseColor("#FFFF92B7"));
                handler.postDelayed(new Runnable() {
                    public void run() {
                        //red
                        btnRe.setBackgroundColor(Color.parseColor("#E91E63"));
                    }
                }, delay); //delay for each
                break;
            case 2:
                btnMi.setBackgroundColor(Color.parseColor("#FF8EDCFF"));
                handler.postDelayed(new Runnable() {
                    public void run() {
                        //Blue
                        btnMi.setBackgroundColor(Color.parseColor("#2196F3"));
                    }
                }, delay); //delay for each
                break;
            case 3:
                btnFa.setBackgroundColor(Color.parseColor("#FFA3FFA7"));
                handler.postDelayed(new Runnable() {
                    public void run() {
                        //Green
                        btnFa.setBackgroundColor(Color.parseColor("#43C848"));
                    }
                }, delay); // delay for each
                break;
        }
    }

    private void disableButtons(){
        btnDo.setEnabled(false);
        btnRe.setEnabled(false);
        btnMi.setEnabled(false);
        btnFa.setEnabled(false);
    }
    private void enableButtons(){
        btnDo.setEnabled(true);
        btnRe.setEnabled(true);
        btnMi.setEnabled(true);
        btnFa.setEnabled(true);
    }
    private void showScore(){
        String text =getResources().getString(R.string.txt_yourScore);
        text=text + ": " + String.valueOf(score);
        txtVScore.setText(text);
    }
}